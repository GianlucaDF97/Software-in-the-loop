%% File : Radio_calibrating.tlc
%% Created : Wed Apr 17 15:13:18 2019
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "Radio_calibrating.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  Radio_calibrating "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile externs

    #ifdef __cplusplus
    extern "C" {
    #endif

    extern void Radio_calibrating_Start_wrapper(real_T *xD);

    extern void Radio_calibrating_Outputs_wrapper(const real_T *manetta,
			const real_T *equilibratore,
			const real_T *alettoni,
			const real_T *timone,
			const int8_T *cal_start,
			real_T *pwm_manetta_max,
			real_T *pwm_manetta_min,
			real_T *pwm_equilibratore_max,
			real_T *pwm_equilibratore_min,
			real_T *pwm_alettoni_max,
			real_T *pwm_alettoni_min,
			real_T *pwm_timone_max,
			real_T *pwm_timone_min,
			int8_T *proceed,
			const real_T *xD);
    extern void Radio_calibrating_Update_wrapper(const real_T *manetta,
			const real_T *equilibratore,
			const real_T *alettoni,
			const real_T *timone,
			const int8_T *cal_start,
			real_T *pwm_manetta_max,
			real_T *pwm_manetta_min,
			real_T *pwm_equilibratore_max,
			real_T *pwm_equilibratore_min,
			real_T *pwm_alettoni_max,
			real_T *pwm_alettoni_min,
			real_T *pwm_timone_max,
			real_T *pwm_timone_min,
			int8_T *proceed,
			real_T *xD);

    extern void Radio_calibrating_Terminate_wrapper(real_T *xD);

    #ifdef __cplusplus
    }
    #endif
  %closefile externs
  %<LibCacheExtern(externs)>
  %%
%endfunction

%% InitializeConditions =========================================================
%%
%function InitializeConditions(block, system) Output
  /* %<Type> Block: %<Name> */
{
  real_T initVector[1] = {0};
  %assign rollVars = ["<dwork>/DSTATE"]
  %assign rollRegions = [0:%<LibBlockDWorkWidth(DSTATE)-1>]
  %roll sigIdx = rollRegions, lcv = 1, block, "Roller", rollVars
    %if %<LibBlockDWorkWidth(DSTATE)> == 1
      %<LibBlockDWork(DSTATE, "", lcv, sigIdx)> = initVector[0];
    %else
      %<LibBlockDWork(DSTATE, "", lcv, sigIdx)> = initVector[%<lcv>];
    %endif
  %endroll
}


%endfunction

%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign pu3 = LibBlockInputSignalAddr(3, "", "", 0)
  %assign pu4 = LibBlockInputSignalAddr(4, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign py3 = LibBlockOutputSignalAddr(3, "", "", 0)
  %assign py4 = LibBlockOutputSignalAddr(4, "", "", 0)
  %assign py5 = LibBlockOutputSignalAddr(5, "", "", 0)
  %assign py6 = LibBlockOutputSignalAddr(6, "", "", 0)
  %assign py7 = LibBlockOutputSignalAddr(7, "", "", 0)
  %assign py8 = LibBlockOutputSignalAddr(8, "", "", 0)
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  Radio_calibrating_Outputs_wrapper(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<pu4>, %<py0>, %<py1>, %<py2>, %<py3>, %<py4>, %<py5>, %<py6>, %<py7>, %<py8>, %<pxd>);
  %%
%endfunction

%% Function: Update ==========================================================
%% Abstract:
%%    Update
%%
%%
%function Update(block, system) Output
    /* S-Function "Radio_calibrating_wrapper" Block: %<Name> */
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign pu3 = LibBlockInputSignalAddr(3, "", "", 0)
  %assign pu4 = LibBlockInputSignalAddr(4, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign py3 = LibBlockOutputSignalAddr(3, "", "", 0)
  %assign py4 = LibBlockOutputSignalAddr(4, "", "", 0)
  %assign py5 = LibBlockOutputSignalAddr(5, "", "", 0)
  %assign py6 = LibBlockOutputSignalAddr(6, "", "", 0)
  %assign py7 = LibBlockOutputSignalAddr(7, "", "", 0)
  %assign py8 = LibBlockOutputSignalAddr(8, "", "", 0)
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  Radio_calibrating_Update_wrapper(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<pu4>, %<py0>, %<py1>, %<py2>, %<py3>, %<py4>, %<py5>, %<py6>, %<py7>, %<py8>, %<pxd>);
  %%
%endfunction

%% [EOF] Radio_calibrating.tlc

