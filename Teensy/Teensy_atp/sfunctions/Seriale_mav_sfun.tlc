%% File : Seriale_mav_sfun.tlc
%% Created : Fri Dec 23 13:06:38 2022
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "Seriale_mav_sfun.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  Seriale_mav_sfun "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output

  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    %assign hFileName = "Seriale_mav_sfun_accel_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif
    SFB_EXTERN_C void Seriale_mav_sfun_Start_wrapper_accel(void);
    SFB_EXTERN_C void Seriale_mav_sfun_Outputs_wrapper_accel(uint8_T *Messaggio,
			int32_T *serial_available);
    #undef SFB_EXTERN_C
    #endif
    %closefile hFile

    %assign cFileName = "Seriale_mav_sfun_accel_wrapper"
    %openfile cFile = "%<cFileName>.c"
    %selectfile cFile
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #include "%<hFileName>.h"
    

    extern void Seriale_mav_sfun_Start_wrapper(void);
    extern void Seriale_mav_sfun_Outputs_wrapper(uint8_T *Messaggio,
			int32_T *serial_available);
    extern void Seriale_mav_sfun_Terminate_wrapper(void);
    void Seriale_mav_sfun_Start_wrapper_accel(void){
    Seriale_mav_sfun_Start_wrapper();
    }
    void Seriale_mav_sfun_Outputs_wrapper_accel(uint8_T *Messaggio,
			int32_T *serial_available){
    Seriale_mav_sfun_Outputs_wrapper(Messaggio,
			serial_available);
    }

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>
    %<LibAddToModelSources("%<cFileName>")>

  %else
  %openfile externs

    #ifdef __cplusplus
    extern "C" {
    #endif

    extern void Seriale_mav_sfun_Start_wrapper(void);

    extern void Seriale_mav_sfun_Outputs_wrapper(uint8_T *Messaggio,
			int32_T *serial_available);

    extern void Seriale_mav_sfun_Terminate_wrapper(void);

    #ifdef __cplusplus
    }
    #endif
  %closefile externs
  %<LibCacheExtern(externs)>

  %endif
  %%
%endfunction


%% Function: Start ============================================================
%%
%function Start(block, system) Output
   /* %<Type> Block: %<Name> */
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    Seriale_mav_sfun_Start_wrapper_accel();
  %else
    Seriale_mav_sfun_Start_wrapper();
  %endif

%endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    Seriale_mav_sfun_Outputs_wrapper_accel(%<py0>, %<py1>);
  %else
    Seriale_mav_sfun_Outputs_wrapper(%<py0>, %<py1>);
  %endif

  %%
%endfunction


%% [EOF] Seriale_mav_sfun.tlc

