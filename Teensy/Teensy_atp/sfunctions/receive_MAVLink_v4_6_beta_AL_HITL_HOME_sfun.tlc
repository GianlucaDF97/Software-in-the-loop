%% File : receive_MAVLink_v4_6_beta_AL_HITL_HOME_sfun.tlc
%% Created : Thu May 11 19:01:30 2023
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "receive_MAVLink_v4_6_beta_AL_HITL_HOME_sfun.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  receive_MAVLink_v4_6_beta_AL_HITL_HOME_sfun "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output

  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    %assign hFileName = "receive_MAVLink_v4_6_beta_AL_HITL_HOME_sfun_accel_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif
    SFB_EXTERN_C void receive_MAVLink_v4_6_beta_AL_HITL_HOME_sfun_Start_wrapper_accel(void);
    SFB_EXTERN_C void receive_MAVLink_v4_6_beta_AL_HITL_HOME_sfun_Outputs_wrapper_accel(const uint8_T *bytes_in,
			const int32_T *len_in,
			const uint16_T *count,
			const uint8_T *AP_SI,
			const uint16_T *mem_in,
			const uint8_T *H_mav,
			const uint8_T *H_data_to_AIR_RX,
			const uint8_T *Base_mode_to_SF,
			uint8_T *Heartbeat_data,
			uint32_T *Heartbeat_custom,
			uint8_T *Mav_state,
			uint8_T *int_sw_safe_interv,
			uint8_T *Cal_home,
			uint8_T *Base_mode,
			uint16_T *GC_request,
			real32_T *P_value_change,
			uint16_T *WP_info,
			real32_T *WP_param,
			uint16_T *mem_out,
			uint8_T *T_number,
			real32_T *T_ref,
			uint8_T *Cal_alt,
			uint8_T *T_int,
			uint8_T *P_int,
			real32_T *P_ref,
			uint8_T *go_home,
			const int_T u_width);
    #undef SFB_EXTERN_C
    #endif
    %closefile hFile

    %assign cFileName = "receive_MAVLink_v4_6_beta_AL_HITL_HOME_sfun_accel_wrapper"
    %openfile cFile = "%<cFileName>.c"
    %selectfile cFile
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #include "%<hFileName>.h"
    

    extern void receive_MAVLink_v4_6_beta_AL_HITL_HOME_sfun_Start_wrapper(void);
    extern void receive_MAVLink_v4_6_beta_AL_HITL_HOME_sfun_Outputs_wrapper(const uint8_T *bytes_in,
			const int32_T *len_in,
			const uint16_T *count,
			const uint8_T *AP_SI,
			const uint16_T *mem_in,
			const uint8_T *H_mav,
			const uint8_T *H_data_to_AIR_RX,
			const uint8_T *Base_mode_to_SF,
			uint8_T *Heartbeat_data,
			uint32_T *Heartbeat_custom,
			uint8_T *Mav_state,
			uint8_T *int_sw_safe_interv,
			uint8_T *Cal_home,
			uint8_T *Base_mode,
			uint16_T *GC_request,
			real32_T *P_value_change,
			uint16_T *WP_info,
			real32_T *WP_param,
			uint16_T *mem_out,
			uint8_T *T_number,
			real32_T *T_ref,
			uint8_T *Cal_alt,
			uint8_T *T_int,
			uint8_T *P_int,
			real32_T *P_ref,
			uint8_T *go_home,
			const int_T u_width);
    extern void receive_MAVLink_v4_6_beta_AL_HITL_HOME_sfun_Terminate_wrapper(void);
    void receive_MAVLink_v4_6_beta_AL_HITL_HOME_sfun_Start_wrapper_accel(void){
    receive_MAVLink_v4_6_beta_AL_HITL_HOME_sfun_Start_wrapper();
    }
    void receive_MAVLink_v4_6_beta_AL_HITL_HOME_sfun_Outputs_wrapper_accel(const uint8_T *bytes_in,
			const int32_T *len_in,
			const uint16_T *count,
			const uint8_T *AP_SI,
			const uint16_T *mem_in,
			const uint8_T *H_mav,
			const uint8_T *H_data_to_AIR_RX,
			const uint8_T *Base_mode_to_SF,
			uint8_T *Heartbeat_data,
			uint32_T *Heartbeat_custom,
			uint8_T *Mav_state,
			uint8_T *int_sw_safe_interv,
			uint8_T *Cal_home,
			uint8_T *Base_mode,
			uint16_T *GC_request,
			real32_T *P_value_change,
			uint16_T *WP_info,
			real32_T *WP_param,
			uint16_T *mem_out,
			uint8_T *T_number,
			real32_T *T_ref,
			uint8_T *Cal_alt,
			uint8_T *T_int,
			uint8_T *P_int,
			real32_T *P_ref,
			uint8_T *go_home,
			const int_T u_width){
    receive_MAVLink_v4_6_beta_AL_HITL_HOME_sfun_Outputs_wrapper(bytes_in,
			len_in,
			count,
			AP_SI,
			mem_in,
			H_mav,
			H_data_to_AIR_RX,
			Base_mode_to_SF,
			Heartbeat_data,
			Heartbeat_custom,
			Mav_state,
			int_sw_safe_interv,
			Cal_home,
			Base_mode,
			GC_request,
			P_value_change,
			WP_info,
			WP_param,
			mem_out,
			T_number,
			T_ref,
			Cal_alt,
			T_int,
			P_int,
			P_ref,
			go_home,
			u_width);
    }

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>
    %<LibAddToModelSources("%<cFileName>")>

  %else
  %openfile externs

    #ifdef __cplusplus
    extern "C" {
    #endif

    extern void receive_MAVLink_v4_6_beta_AL_HITL_HOME_sfun_Start_wrapper(void);

    extern void receive_MAVLink_v4_6_beta_AL_HITL_HOME_sfun_Outputs_wrapper(const uint8_T *bytes_in,
			const int32_T *len_in,
			const uint16_T *count,
			const uint8_T *AP_SI,
			const uint16_T *mem_in,
			const uint8_T *H_mav,
			const uint8_T *H_data_to_AIR_RX,
			const uint8_T *Base_mode_to_SF,
			uint8_T *Heartbeat_data,
			uint32_T *Heartbeat_custom,
			uint8_T *Mav_state,
			uint8_T *int_sw_safe_interv,
			uint8_T *Cal_home,
			uint8_T *Base_mode,
			uint16_T *GC_request,
			real32_T *P_value_change,
			uint16_T *WP_info,
			real32_T *WP_param,
			uint16_T *mem_out,
			uint8_T *T_number,
			real32_T *T_ref,
			uint8_T *Cal_alt,
			uint8_T *T_int,
			uint8_T *P_int,
			real32_T *P_ref,
			uint8_T *go_home,
			const int_T u_width);

    extern void receive_MAVLink_v4_6_beta_AL_HITL_HOME_sfun_Terminate_wrapper(void);

    #ifdef __cplusplus
    }
    #endif
  %closefile externs
  %<LibCacheExtern(externs)>

  %endif
  %%
%endfunction


%% Function: Start ============================================================
%%
%function Start(block, system) Output
   /* %<Type> Block: %<Name> */
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    receive_MAVLink_v4_6_beta_AL_HITL_HOME_sfun_Start_wrapper_accel();
  %else
    receive_MAVLink_v4_6_beta_AL_HITL_HOME_sfun_Start_wrapper();
  %endif

%endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign pu3 = LibBlockInputSignalAddr(3, "", "", 0)
  %assign pu4 = LibBlockInputSignalAddr(4, "", "", 0)
  %assign pu5 = LibBlockInputSignalAddr(5, "", "", 0)
  %assign pu6 = LibBlockInputSignalAddr(6, "", "", 0)
  %assign pu7 = LibBlockInputSignalAddr(7, "", "", 0)
  %assign pu_width = LibBlockInputSignalWidth(0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign py3 = LibBlockOutputSignalAddr(3, "", "", 0)
  %assign py4 = LibBlockOutputSignalAddr(4, "", "", 0)
  %assign py5 = LibBlockOutputSignalAddr(5, "", "", 0)
  %assign py6 = LibBlockOutputSignalAddr(6, "", "", 0)
  %assign py7 = LibBlockOutputSignalAddr(7, "", "", 0)
  %assign py8 = LibBlockOutputSignalAddr(8, "", "", 0)
  %assign py9 = LibBlockOutputSignalAddr(9, "", "", 0)
  %assign py10 = LibBlockOutputSignalAddr(10, "", "", 0)
  %assign py11 = LibBlockOutputSignalAddr(11, "", "", 0)
  %assign py12 = LibBlockOutputSignalAddr(12, "", "", 0)
  %assign py13 = LibBlockOutputSignalAddr(13, "", "", 0)
  %assign py14 = LibBlockOutputSignalAddr(14, "", "", 0)
  %assign py15 = LibBlockOutputSignalAddr(15, "", "", 0)
  %assign py16 = LibBlockOutputSignalAddr(16, "", "", 0)
  %assign py17 = LibBlockOutputSignalAddr(17, "", "", 0)
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    receive_MAVLink_v4_6_beta_AL_HITL_HOME_sfun_Outputs_wrapper_accel(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<pu4>, %<pu5>, %<pu6>, %<pu7>, %<py0>, %<py1>, %<py2>, %<py3>, %<py4>, %<py5>, %<py6>, %<py7>, %<py8>, %<py9>, %<py10>, %<py11>, %<py12>, %<py13>, %<py14>, %<py15>, %<py16>, %<py17>, %<pu_width>);
  %else
    receive_MAVLink_v4_6_beta_AL_HITL_HOME_sfun_Outputs_wrapper(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<pu4>, %<pu5>, %<pu6>, %<pu7>, %<py0>, %<py1>, %<py2>, %<py3>, %<py4>, %<py5>, %<py6>, %<py7>, %<py8>, %<py9>, %<py10>, %<py11>, %<py12>, %<py13>, %<py14>, %<py15>, %<py16>, %<py17>, %<pu_width>);
  %endif

  %%
%endfunction


%% [EOF] receive_MAVLink_v4_6_beta_AL_HITL_HOME_sfun.tlc

