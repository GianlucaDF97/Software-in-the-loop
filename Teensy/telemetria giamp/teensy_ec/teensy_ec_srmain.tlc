%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Abstract:
%%   Custom file processing to generate a "main" file.
%%
%% Copyright 1994-2014 The MathWorks, Inc.
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%selectfile NULL_FILE

%function FcnSingleTaskingMain() void

  %if GenerateSampleERTMain
    %assign CompiledModel.GenerateSampleERTMain = TLC_FALSE
  %endif

  %if LibIsModelReferenceTarget()
    %return
  %endif

  %assign cFile = LibCreateSourceFile("Source", "Custom", "ert_main")
  %openfile tmpBuf
  #include "%<LibGetMdlPubHdrBaseName()>.h"
  #include "Arduino.h"
  %closefile tmpBuf
  %<LibSetSourceFileSection(cFile, "Includes", tmpBuf)>

  %openfile tmpBuf
  %closefile tmpBuf
  %<LibSetSourceFileSection(cFile, "Declarations", tmpBuf)>

  %openfile tmpBuf
  /* Overrun counter */
  static uint8_t uOverrunCounter;

  uint8_t GetOverrunCounter(void)
  {
  	return uOverrunCounter;
  }

  %% Get fundamental step time
  %assign SAMPLETIME = CompiledModel.FundamentalStepSize
  %if SAMPLETIME < 0.00005
      %% Even 50 microseconds is too quick for Arduino
      %<LibReportError("The minimum supported sample time is 50 microseconds. Change the Sample time parameter in blocks that use incorrect sample times.")>
  %endif
  %assign SampleRate  = CAST("Number", %<SAMPLETIME> * 1000000)
  #define STEP_SIZE %<SampleRate>UL /* Sample Time in microseconds */
  unsigned long oldTime;
  unsigned long actualTime;

  void setup()
  {



    /* Initialize model */
    %<LibCallModelInitialize()>\

    oldTime = micros();
   }

   void loop() {
    while(1){
	    %<LibCallModelStep(0)>\

        actualTime = micros();
        /* Overrun check */
        if ((actualTime - oldTime) >= STEP_SIZE) {
            /* We missed our time slot for actual step, report it! */
            if(uOverrunCounter < 255U){
                uOverrunCounter++;
            }
            oldTime = actualTime;               /* Update time stamp of last step */
            continue;                           /* We are late, continue with next step */
        }

        /* Waiting with pooling method */
        while((actualTime - oldTime) < STEP_SIZE){
            actualTime = micros();                  /* Get actual time */
        }
        oldTime = actualTime;                       /* Update time stamp of last step */
    }
}


  %closefile tmpBuf
  %<LibSetSourceFileSection(cFile, "Functions", tmpBuf)>

%endfunction
